package com.aut.pdc.mike.gamemodel;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yangminghao
 */
public class VirtualPetGame {

    public VirtualPetGame() {
        this.autoConnectVirtualPetDB();
    }

    Connection conn = null;
    String url = "jdbc:derby:gpq8299DB;create=true";//url of the DB host
    
    String username = "pdc";  //your DB username
    String password = "pdc";   //your DB password
    Statement statement;
    ResultSet rs;
    
   
    
    public void autoConnectVirtualPetDB() {
        try {
            conn = DriverManager.getConnection(url, username, password);
            statement = conn.createStatement();
            //If the PET Table hasn't created yet
            if(checkTableExisting("PET")){
            statement.executeUpdate("CREATE TABLE PET(PETID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),PETNAME VARCHAR(20),ENERGY INT,HAPPINESS INT,HEALTH INT,ALIVE BOOLEAN,STRAIN VARCHAR(20),OWNERNAME VARCHAR(20) UNIQUE)");//Create the pet table
            }
            //If the PLAYER Table hasn't created yet
            if(checkTableExisting("PLAYER")){
            statement.executeUpdate("CREATE TABLE PLAYER(PLAYERID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1),PLAYERNAME VARCHAR(30) NOT NULL,PASSWORD VARCHAR(20) NOT NULL)");//Create the player table
            }
            //If the FOOD Table hasn't created yet
            if(checkTableExisting("FOOD")){
            statement.executeUpdate("CREATE TABLE FOOD (ITEMNAME VARCHAR(50), ITEMDESC VARCHAR(50), FOODENERGY INTEGER)"); //Create Food table
            //Insert the food list into the table
            statement.executeUpdate("INSERT INTO FOOD (ITEMNAME, ITEMDESC, FOODENERGY) \n" +
            " VALUES ('Beef', 'It can restore 15 starvation for the pet', 15), ('Bone', 'It can restore 10 starvation for the pet', 10), ('Milk', 'It can restore 5 starvation for the pet', 5), ('Dry Food', 'It can restore 5 starvation for the pet', 5)");
            }
            //If the TOYS Table hasn't created yet
            if(checkTableExisting("TOYS")){
            statement.executeUpdate("CREATE TABLE TOYS (ITEMNAME VARCHAR(50), ITEMDESC VARCHAR(50), TOYHAPPINESS INTEGER, ENERGYCOST INTEGER)"); //Create Toys table
            //Insert the toy list into the table
            statement.executeUpdate("INSERT INTO TOYS (ITEMNAME, ITEMDESC, TOYHAPPINESS, ENERGYCOST) \n" +
            " VALUES ('Ball', 'It can restore 10 happiness for the pet', 10, 8), ('Plush Toys', 'It can restore 15 happiness', 15, 10), ('Plastic Bone', 'It can restore 5 happiness', 5, 5), ('Rope', 'It can restore 3 happiness', 3, 3)");
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Create Player Account
     *
     * @param userName
     * @param pwd
     * @return
     */
    public boolean createPlayerAccount(String userName, String pwd) {
        Boolean accountExist = null;
        ResultSet rs = null;
        try {
            statement = conn.createStatement();
            rs = statement.executeQuery("SELECT * FROM PLAYER WHERE PLAYERNAME = '" + userName + "'");
            if (rs.next()) {
                accountExist = true;
            } else {
                statement.executeUpdate("INSERT INTO PLAYER (PLAYERNAME,PASSWORD) VALUES ('" + userName + "','" + pwd + "')");
                accountExist = false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return accountExist;
    }

    /**
     * Check whether the table is already existed
     *
     * @param newTableName
     */
    public Boolean checkTableExisting(String newTableName) {
        Boolean flag = true;
        try {
            System.out.println("Check Existing Tables.... ");
            DatabaseMetaData dbmd = conn.getMetaData();
            ResultSet rsDBMeta = dbmd.getTables(null, null, null, null);//types);
            Statement dropStatement = null;
            while (rsDBMeta.next()) {
                String tableName = rsDBMeta.getString("TABLE_NAME");
                if (tableName.compareToIgnoreCase(newTableName) == 0) {
                    flag = false;
                }
            }
            if (rsDBMeta != null) {
                rsDBMeta.close();
            }
            if (dropStatement != null) {
                dropStatement.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
           finally{
            return flag;
        }
    }

    /**
     * Get the pet object according to player name
     *
     * @param playername
     * @return
     */
    public Pet getPetByPlayerName(String playername) {
        Pet pet = new Pet();
        try {
            Statement statement = conn.createStatement();
            rs = statement.executeQuery("SELECT * FROM PET,PLAYER WHERE PET.OWNERNAME='" + playername + "'");
            if (rs.next()) {
                pet.setName(rs.getString("PETNAME"));
                pet.setEnergy(rs.getInt("ENERGY"));
                pet.setHappiness(rs.getInt("HAPPINESS"));
                pet.setHealth(rs.getInt("HEALTH"));
                pet.setAlive(rs.getBoolean("ALIVE"));
                pet.setStrain(rs.getString("STRAIN"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return pet;
    }

    /**
     * Update pet information by pet's id
     *
     * @param petId
     * @param petInfo
     */
    public void updatePetInformationById(int petId, Pet petInfo) {
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate("UPDATE PET SET ENERGY=" + petInfo.getEnergy() + ",HAPPINESS=" + petInfo.getHappiness() + ",HEALTH=" + petInfo.getHealth() + ",ALIVE=" + petInfo.isAlive() + ",STRAIN='" + petInfo.getStrain() + "' WHERE PETID=" + petId);

        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Check the login whether is successful
     *
     * @param userName
     * @param userpwd
     * @return
     */
    public int loginCheck(String userName, String userpwd) {
        int temp = 0;
        try {
            Statement statement = conn.createStatement();
            rs = statement.executeQuery("SELECT * FROM PLAYER WHERE PLAYERNAME = '" + userName + "'");
            if (rs.next()) {
                if (rs.getString("PASSWORD").equals(userpwd)) {
                    temp = 1;
                } else {
                    temp = -1;
                }
            } else {
                temp = 0;
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return temp;
    }

    /**
     * Delete the pet information from the database
     *
     * @param petId
     */
    public void deletePetInfo(int petId) {
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate("DELETE FROM PET WHERE PETID = " + petId);
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Read the food information from the database
     *
     * @return ArrayList<Food>
     */
    public ArrayList<Food> readFoodTable() {
        int foodCount = 0;
        int count = 0;
        ArrayList<Food> foodList = new ArrayList();
        try {
            Statement statement = conn.createStatement();
            rs = statement.executeQuery("SELECT * FROM FOOD");
            while (rs.next()) {
                Food food = new Food(rs.getString("ITEMNAME"), rs.getString("ITEMDESC"), rs.getInt("FOODENERGY"));
                foodList.add(food);
                count++;
                if (count == (foodCount)) {
                    break;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return foodList;
    }

    /**
     * Read the toy information from the database
     *
     * @return ArrayList<Toys>
     */
    public ArrayList<Toys> readToyTable() {
        int toyCount = 0;
        int count = 0;
        ArrayList<Toys> toyList = new ArrayList();
        try {
            Statement statement = conn.createStatement();
            rs = statement.executeQuery("SELECT * FROM TOYS");
            while (rs.next()) {
                Toys toy = new Toys(rs.getString("ITEMNAME"), rs.getString("ITEMDESC"), rs.getInt("TOYHAPPINESS"), rs.getInt("ENERGYCOST"));
                toyList.add(toy);
                count++;
                if (count == (toyCount)) {
                    break;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return toyList;
    }

    /**
     * Save the pet information for the player if the player has already got a
     * pet record
     *
     * @param playerName
     * @param pet
     */
    public void saveGameIfPetExists(String playerName, Pet pet) {
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate("UPDATE PET SET ENERGY=" + pet.getEnergy() + ",HAPPINESS=" + pet.getHappiness() + ",HEALTH=" + pet.getHealth() + ",ALIVE=" + pet.isAlive() + ",STRAIN='" + pet.getStrain() + "' WHERE OWNERNAME ='" + playerName + "'");
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Save the pet information for the player if the player hasn't got a pet
     * record
     *
     * @param playerName
     * @param pet
     */
    public void saveNewPet(String playerName, Pet pet) {
        try {
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO PET (PETNAME,ENERGY,HAPPINESS,HEALTH,ALIVE,STRAIN,OWNERNAME) VALUES ('" + pet.getName() + "'," + pet.getEnergy() + "," + pet.getHappiness() + "," + pet.getHealth() + "," + pet.isAlive() + ",'" + pet.getStrain() + "','" + playerName + "')");
           
           
        } catch (SQLException ex) {
            Logger.getLogger(VirtualPetGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
